=================
Assign Query
=================

let x = Resources.*

let ecs_tasks = Resources.*[ 
    Type == 'AWS::ECS::TaskDefinition'
]

let ecs_tasks = Resources.*[ 
    Properties.NetworkInterfaces[*] !empty
]

---

(guard
  (assignment
    name: (variable_name)
    value: (query
      (access
        (property
          (identifier))
        (traversal
          (wildcard)))))
  (assignment
    name: (variable_name)
    value: (query
      (access
        (property
          (identifier))
        (traversal
          (wildcard))
        (filter
          left: (access
            (property
              (identifier)))
          comparison: (binary_comparison
            operator: (binary_operator)
            right: (literal_value
              (string)))))))
  (assignment
    name: (variable_name)
    value: (query
      (access
        (property
          (identifier))
        (traversal
          (wildcard))
        (filter
          left: (access
            (property
              (identifier))
            (traversal
              (property
                (identifier)))
            (filter
              (wildcard)))
          comparison: (unary_comparison
            (not_keyword)
            operator: (unary_operator)))))))

===
Assign Complex Query
===

let only_prod_ddb = %ddb[
    some Properties.Tags[*] {
        Test == /Test/
        Key == /PROD/
        or
        Value == /^App/
    }
]

let ssl_secure_bucket_policies = %s3_buckets_policies_ssl_requests_only[
  Properties.PolicyDocument {
    some Statement[*] {
      Effect == 'Deny'
      Condition {
        Bool.'aws:SecureTransport' == false
      }
    }
  }
]
---

(guard
  (assignment
    name: (variable_name)
    value: (query
      (access
        (variable_reference)
        (filter
          (some)
          (access
            (property
              (identifier))
            (traversal
              (property
                (identifier)))
            (filter
              (wildcard)))
          (clause
            left: (query
              (access
                (property
                  (identifier))))
            comparison: (binary_comparison
              operator: (binary_operator)
              right: (literal_value
                (regex
                  pattern: (regex_pattern)))))
          (clause
            left: (query
              (access
                (property
                  (identifier))))
            comparison: (binary_comparison
              operator: (binary_operator)
              right: (literal_value
                (regex
                  pattern: (regex_pattern)))))
          (or_term)
          (clause
            left: (query
              (access
                (property
                  (identifier))))
            comparison: (binary_comparison
              operator: (binary_operator)
              right: (literal_value
                (regex
                  pattern: (regex_pattern)))))))))
  (assignment
    name: (variable_name)
    value: (query
      (access
        (variable_reference)
        (filter
          (access
            (property
              (identifier))
            (traversal
              (property
                (identifier))))
          (query_block
            (query
              (some)
              (access
                (property
                  (identifier))
                (filter
                  (wildcard))))
            (clause
              left: (query
                (access
                  (property
                    (identifier))))
              comparison: (binary_comparison
                operator: (binary_operator)
                right: (literal_value
                  (string))))
            (query_block
              (query
                (access
                  (property
                    (identifier))))
              (clause
                left: (query
                  (access
                    (property
                      (identifier))
                    (traversal
                      (property
                        (string)))))
                comparison: (binary_comparison
                  operator: (binary_operator)
                  right: (literal_value
                    (bool)))))))))))

=================
Assign Regex
=================

let x = /[a-zA-Z]/

---

(guard
  (assignment
    name: (variable_name)
    value: (literal_value
      (regex
        pattern: (regex_pattern)))))

================
Assign String
================

let x = 'test'

---

(guard
  (assignment
    name: (variable_name)
    value: (literal_value
      (string))))

================
Assign with some
================

let x = some Test.*[x == 1]

---

(guard
  (assignment
    name: (variable_name)
    value: (query
      (some)
      (access
        (property
          (identifier))
        (traversal
          (wildcard))
        (filter
          left: (access
            (property
              (identifier)))
          comparison: (binary_comparison
            operator: (binary_operator)
            right: (literal_value
              (integer))))))))

================
Assign this
================

let x = this

---

(guard
  (assignment
    name: (variable_name)
    value: (query
      (access
        (this)))))

==================
Assign Boolean
==================

let x = true
let x = True
let x = false
let x = False

---

(guard
  (assignment
    name: (variable_name)
    value: (literal_value
      (bool)))
  (assignment
    name: (variable_name)
    value: (literal_value
      (bool)))
  (assignment
    name: (variable_name)
    value: (literal_value
      (bool)))
  (assignment
    name: (variable_name)
    value: (literal_value
      (bool))))

==================
Assign List
==================

let x = ['test']
let y = [
  1
]

---

(guard
  (assignment
    name: (variable_name)
    value: (literal_value
      (list
        item: (literal_value
          (string)))))
  (assignment
    name: (variable_name)
    value: (literal_value
      (list
        item: (literal_value
          (integer))))))

==================
Assign Map
==================

let x = { Key: "Value" }
let x = {
    'a': 1,
    'b': true,
    'c': ["1"],
    'd': {"x": 1},
}

let x = {
    # test comment
    'a': 1, # test
}

---

(guard
  (assignment
    name: (variable_name)
    value: (literal_value
      (map
        key: (identifier)
        value: (string))))
  (assignment
    name: (variable_name)
    value: (literal_value
      (map
        key: (string)
        value: (integer)
        key: (string)
        value: (bool)
        key: (string)
        value: (list
          item: (literal_value
            (string)))
        key: (string)
        value: (map
          key: (string)
          value: (integer)))))
  (assignment
    name: (variable_name)
    value: (literal_value
      (map
        (comment)
        key: (string)
        value: (integer)
        (comment)))))

==================
Assign Function Call
==================

let x = count([1])
let x = count(%test)
let x = count(Properties.Statement[*])

---

(guard
  (assignment
    name: (variable_name)
    value: (function_call
      name: (identifier)
      argument: (literal_value
        (list
          item: (literal_value
            (integer))))))
  (assignment
    name: (variable_name)
    value: (function_call
      name: (identifier)
      argument: (variable_reference)))
  (assignment
    name: (variable_name)
    value: (function_call
      name: (identifier)
      argument: (query
        (access
          (property
            (identifier))
          (traversal
            (property
              (identifier)))
          (filter
            (wildcard)))))))
