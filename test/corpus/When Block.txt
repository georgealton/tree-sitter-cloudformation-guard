===
Empty When
===

when %properties.b == 2 {
}

---

(guard
  (when_block
    (when_expression
      (clause
        left: (query
          (access
            (variable_reference)
            (traversal
              (property
                (identifier)))))
        comparison: (binary_comparison
          operator: (binary_operator)
          right: (literal_value
            (integer)))))))

===
When with Rule Clause
===

when xy
asdf # some comment
test1 or test #comment
test or 
cat
dog << message >> or # comment
tree(Propeties, y)
not house
{
}

---

(guard
  (when_block
    (when_expression
      (rule_clause
        name: (variable_name))
      (rule_clause
        name: (variable_name))
      (comment)
      (rule_clause
        name: (variable_name))
      (or_term)
      (rule_clause
        name: (variable_name))
      (comment)
      (rule_clause
        name: (variable_name))
      (or_term)
      (rule_clause
        name: (variable_name))
      (rule_clause
        name: (variable_name)
        message: (custom_message))
      (or_term)
      (comment)
      (rule_clause
        name: (variable_name)
        (parameters
          parameter: (identifier)
          parameter: (identifier)))
      (rule_clause
        (not_keyword)
        name: (variable_name)))))

===
When Multiple Clauses
===

when %properties.a exists
     %properties.b == 1 or 
     %properties.b == 1 
     {
         let x = 1
}

---

(guard
  (when_block
    (when_expression
      (clause
        left: (query
          (access
            (variable_reference)
            (traversal
              (property
                (identifier)))))
        comparison: (unary_comparison
          operator: (unary_operator)))
      (clause
        left: (query
          (access
            (variable_reference)
            (traversal
              (property
                (identifier)))))
        comparison: (binary_comparison
          operator: (binary_operator)
          right: (literal_value
            (integer))))
      (or_term)
      (clause
        left: (query
          (access
            (variable_reference)
            (traversal
              (property
                (identifier)))))
        comparison: (binary_comparison
          operator: (binary_operator)
          right: (literal_value
            (integer)))))
    (assignment
      name: (variable_name)
      value: (literal_value
        (integer)))))

===
When With loop
===

when %properties.b == 2 {
    %test[*] {
    }
}

---

(guard
  (when_block
    (when_expression
      (clause
        left: (query
          (access
            (variable_reference)
            (traversal
              (property
                (identifier)))))
        comparison: (binary_comparison
          operator: (binary_operator)
          right: (literal_value
            (integer)))))
    (query_block
      (query
        (access
          (variable_reference)
          (filter
            (wildcard)))))))

===
When With assignment
===

when %properties.b == 2 {
    let x = 3
}

---

(guard
  (when_block
    (when_expression
      (clause
        left: (query
          (access
            (variable_reference)
            (traversal
              (property
                (identifier)))))
        comparison: (binary_comparison
          operator: (binary_operator)
          right: (literal_value
            (integer)))))
    (assignment
      name: (variable_name)
      value: (literal_value
        (integer)))))

===
When With when
===

when %properties.b == 2 {
    when %properties.c == 3 {
    }
}

---

(guard
  (when_block
    (when_expression
      (clause
        left: (query
          (access
            (variable_reference)
            (traversal
              (property
                (identifier)))))
        comparison: (binary_comparison
          operator: (binary_operator)
          right: (literal_value
            (integer)))))
    (when_block
      (when_expression
        (clause
          left: (query
            (access
              (variable_reference)
              (traversal
                (property
                  (identifier)))))
          comparison: (binary_comparison
            operator: (binary_operator)
            right: (literal_value
              (integer))))))))

===
When With Clause
===

when %properties.b == 2 {
    Test.A == 1
}

when %properties.b == 2 {
    Test.A == 1
    Test.A == 1 or Test.B exists or
    Test.A == 1
}

---

(guard
  (when_block
    (when_expression
      (clause
        left: (query
          (access
            (variable_reference)
            (traversal
              (property
                (identifier)))))
        comparison: (binary_comparison
          operator: (binary_operator)
          right: (literal_value
            (integer)))))
    (clause
      left: (query
        (access
          (property
            (identifier))
          (traversal
            (property
              (identifier)))))
      comparison: (binary_comparison
        operator: (binary_operator)
        right: (literal_value
          (integer)))))
  (when_block
    (when_expression
      (clause
        left: (query
          (access
            (variable_reference)
            (traversal
              (property
                (identifier)))))
        comparison: (binary_comparison
          operator: (binary_operator)
          right: (literal_value
            (integer)))))
    (clause
      left: (query
        (access
          (property
            (identifier))
          (traversal
            (property
              (identifier)))))
      comparison: (binary_comparison
        operator: (binary_operator)
        right: (literal_value
          (integer))))
    (clause
      left: (query
        (access
          (property
            (identifier))
          (traversal
            (property
              (identifier)))))
      comparison: (binary_comparison
        operator: (binary_operator)
        right: (literal_value
          (integer))))
    (or_term)
    (clause
      left: (query
        (access
          (property
            (identifier))
          (traversal
            (property
              (identifier)))))
      comparison: (unary_comparison
        operator: (unary_operator)))
    (or_term)
    (clause
      left: (query
        (access
          (property
            (identifier))
          (traversal
            (property
              (identifier)))))
      comparison: (binary_comparison
        operator: (binary_operator)
        right: (literal_value
          (integer))))))

===
When Query Block
===

when %properties.b == 2 {
    Properties {
        X == 1
    }
}

---

(guard
  (when_block
    (when_expression
      (clause
        left: (query
          (access
            (variable_reference)
            (traversal
              (property
                (identifier)))))
        comparison: (binary_comparison
          operator: (binary_operator)
          right: (literal_value
            (integer)))))
    (query_block
      (query
        (access
          (property
            (identifier))))
      (clause
        left: (query
          (access
            (property
              (identifier))))
        comparison: (binary_comparison
          operator: (binary_operator)
          right: (literal_value
            (integer)))))))
